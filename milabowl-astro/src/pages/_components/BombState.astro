---
import type { BombGameWeekState } from '../../game_state/bombState';
import { BOMB_EMOJIS, GetBombEmoji } from './bombEmoji';
import BombRow from './BombRow.astro';

export interface Props {
  bombState: BombGameWeekState[];
}

function formatManagerName(
  managerName: string,
  maxLength: number = 30
): string {
  if (!managerName) return '';
  return managerName.length > maxLength
    ? `${managerName.substring(0, maxLength)}...`
    : managerName;
}

const GetBombPoints = (bombTier: string): number => {
  switch (bombTier) {
    case 'Nuke':
      return -6; // Points for exploded bomb
    case 'Bomb':
      return -4; // No points for held bomb
    case 'Dynamite':
      return -2; // Points for thrown bomb
    default:
      return 0; // Default case for other states
  }
};

const { bombState } = Astro.props;
---

<>
  {
    bombState
      .sort((a, b) => b.gameWeek - a.gameWeek)
      .map((r, i) => (
        <div
          class={`${i !== bombState.length - 1 ? 'border-b border-slate-200 dark:border-slate-700' : ''} col-span-5 grid grid-cols-12 py-2 text-sm`}
        >
          <div class="col-span-2 flex flex-col justify-center gap-2 font-bold">
            GW {r.gameWeek}
            <div class="flex h-8 w-8 items-center justify-center rounded-full bg-slate-200 dark:bg-slate-800">
              {GetBombEmoji(r.bombTier)}
            </div>
          </div>

          <div class="col-span-10 flex flex-col gap-3 px-2">
            {r.bombThrower && (
              <BombRow>
                {`${BOMB_EMOJIS.thrown} ${formatManagerName(r.bombThrower.managerName)} threw the bomb`}
              </BombRow>
            )}
            <BombRow>
              {r.bombState === 'Exploded' &&
                `${BOMB_EMOJIS.exploded} Bomb exploded on `}
              {r.bombState === 'Diffused' && `${BOMB_EMOJIS.diffused} `}
              {r.bombState !== 'Diffused' &&
                r.bombState !== 'Exploded' &&
                `${BOMB_EMOJIS.holding} `}
              {formatManagerName(r.bombHolder.managerName)}
              {r.bombState === 'Diffused' ? ` diffused the bomb` : ''}
              {r.bombState !== 'Exploded' && r.bombState !== 'Diffused'
                ? ` is holding the bomb`
                : ''}
              {r.bombState === 'Exploded' &&
                ` (${GetBombPoints(r.bombTier)} pts) `}
            </BombRow>
            {r.collateralTargets.length > 0 && (
              <BombRow>
                {`${BOMB_EMOJIS.collateral} ${r.collateralTargets
                  .map((t) => formatManagerName(t.managerName, 20))
                  .join(
                    ', '
                  )} was targeted by VC ${r.collateralTargetPlayerName} and hit by collateral (${GetBombPoints(r.bombTier) / 2} pts)`}
              </BombRow>
            )}
            {r.bombDiffusalKits.length > 0 && (
              <BombRow>
                {`${BOMB_EMOJIS.diffusalKit} ${r.bombDiffusalKits
                  .map((t) => formatManagerName(t.managerName, 20))
                  .join(', ')} earned a diffusal kit`}
              </BombRow>
            )}
          </div>
        </div>
      ))
  }
</>
