---
import type { GetStaticPaths } from 'astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import readingTime from 'reading-time';
import { format } from 'date-fns';
import AuthorIcon from './_components/AuthorIcon.astro';
import Tags from './_components/Tags.astro';
import BlogNavigation from './_components/BlogNavigation.astro';
import Markdown from '../../components/core/Typography/Markdown.astro';
import MarkdownLayout from '../../layouts/MarkdownLayout.astro';

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = (await getCollection('blog')).sort((a, b) =>
    a.data.date < b.data.date ? 1 : -1
  );

  const paths = posts.map((post, i) => {
    const prevPost = i + 1 < posts.length ? posts[i + 1] : undefined;
    const nextPost = i - 1 < posts.length ? posts[i - 1] : undefined;
    return {
      params: { slug: post.slug },
      props: { post, prevPost, nextPost },
    };
  });

  return paths;
};

export interface Props {
  post: CollectionEntry<'blog'>;
  prevPost?: CollectionEntry<'blog'>;
  nextPost?: CollectionEntry<'blog'>;
}

const { post, prevPost, nextPost } = Astro.props;
const { Content } = await post.render();
const stats = readingTime(post.body);
---

<MarkdownLayout title={`Blogpost - ${post.data.title}`}>
  <div class="flex items-center gap-4">
    <AuthorIcon />
    <div class="grow">
      <div>
        {post.data.author}
        <span class="text-content-secondary">- {stats.text}</span>
      </div>
    </div>
    <time
      date-time={format(post.data.date, 'yyyy-MM-dd')}
      class="text-content-secondary"
      >{format(post.data.date, 'dd.MM.yyyy')}</time
    >
  </div>

  <h1 class="text-primary mb-8 mt-4 text-4xl font-bold">
    {post.data.title}
  </h1>

  <Markdown>
    <Content />
  </Markdown>

  <Tags tags={post.data.tags} />

  <div slot="post-card" class="my-2 grid grid-cols-2 gap-2">
    {
      prevPost && (
        <BlogNavigation navigationText="Previous Post" post={prevPost} />
      )
    }
    {!prevPost && <div />}
    {nextPost && <BlogNavigation navigationText="Next Post" post={nextPost} />}
  </div>
</MarkdownLayout>
